{"name":"Webdrivertestingtemplate","tagline":"A Gradle template for JUnit Selenium WebDriver tests","body":"# Info\r\n\r\nThis is a Java project that can be used as a template (or archetype) to start a WebDriver web browser testing<br/>\r\nproject.  I chose to simplify and and implement using simply WebDriver and Gradle.<br/>\r\n\r\nI am very much interested in others forking my code and/or letting me know how it can be improved.\r\n\r\nThe idea here is to replace your existing automation framework, such as \"HP Quality Center\", \"XStudio\", or \"Rational<br/>\r\nFunctional Tester\", with a pure Java solution managed by the Gradle build system.   I use Jenkins to schedule my tests<br/>\r\nand run them.\r\n\r\n# Versions\r\n\r\nVersion 1.0 - March 16, 2013\r\n\r\n\r\n# Project Layout\r\n<br/>\r\nEclipse Root <br/>\r\n+--- Project ':root'<br/>\r\n+--- Project ':sub-project'<br/>\r\n+--- Project ':commonlib'<br/>\r\n+--- Project ':google'<br/>\r\n+--- Project ':parallelwebdriver'<br/>\r\n+--- ...<br/>\r\n<br/>\r\n\r\n# Overview<br/>\r\n1. Project \"sub-project\" is a project you add yourself, if you want.<br/>\r\n2. Project \"google\" is a RemoteWebDriver JUnit test-suite using a local Grid server that is capable of running<br/>multiple threads of web browser tests.\r\n3. Project \"parallelwebdriver\" is a test of a  multi-window multi-threaded run using a static local website.<br/>\r\n4. Project \"commonlib\" is a sub-project containing methods shared between projects.<br/>\r\n5. Project \"root\" is an 'includeFlat' Gradle-layout-alias to Eclipse project-root-dir 'WebDriverTestingTemplate'.\r\n\r\n# Quick Start\r\nNormally, this project would be ran through the Gradle plugin for Eclipse IDE, but I have tried to make it easier by<br/>\r\nincluding a method to run dynamically and directly from the .zip distribution on the command line.\r\n\r\nTo try this project without requiring a Java IDE, just make sure you download Gradle 1.4, configure your\r\nGRADLE_HOME<br/> environment variable, add %GRADLE_HOME%\\bin to your PATH, and then download the .zip distribution\r\nof this<br/> project, unzip it, and run the included <b>root/runProjectMenu.bat</b> script.\r\n\r\n# Implemented Features\r\n<table>\r\n  <tr>\r\n    <th>Feature</th>\r\n    <th>Description</th>\r\n  </tr>\r\n  <tr>\r\n    <th>JUnit based</th>\r\n    <td>For use ONLY with JUnit 4.11 or higher because of the usage of the parameterized capability<br/> of JUnit. This dependency is configured by the Gradle build script.</td>\r\n  </tr>\r\n    <tr>\r\n    <th>Parallel runner<br/>using JUnit</th>\r\n    <td>A parallel runner using the Gradle maxParallelForks method.</td>\r\n  </tr>\r\n  <tr>\r\n    <th>Native automation support</th>\r\n    <td>For use with Sikuli 1.0.1 or higher to test native elements that WebDriver \"Action\" is<br/> unable to control. This dependency is configured in the Gradle build script.  If you implement<br/> this however, you may not be able to use the remote webdriver option in<br/> your project. </td>\r\n  </tr>\r\n    <tr>\r\n    <th>Uses RemoteWebDriver<br/>JSON Hub Server</th>\r\n    <td>I have included an implementation of a WebDriverServer class that starts a RemoteWebDriver<br/> JSON Hub server instance in the BeforeClass method of tests. This server is a static member <br/>of the utility class that the tests extend. </td>\r\n  </tr>\r\n  <tr>\r\n    <th>Parameterized data <br/>driven capability</th>\r\n    <td>Unit tests are parameterized from a csv file.  Can also load tests from XML, XLS, a database, etc.</td>\r\n  </tr>\r\n  <tr>\r\n    <th>Logging and Reporting</th>\r\n    <td>Logs test output to console and to a file using SLF4j/LogBack API, and configured by<br/> a <b>logback.xml</b> file. Will generate reports of JUnit test results at<br/> <b>build/reports/test/index.html</b> .  Will place a junit.log file at <b>build/logs/junit.log</b> .</td>\r\n  </tr>\r\n  <tr>\r\n    <th>Page Object design <br/>pattern</th>\r\n    <td>Uses the WebDriver \"page object\" design pattern, enhanced by the Selenium<br/> \"LoadableComponent\" extendable class.</td>\r\n  </tr>\r\n    <tr>\r\n    <th>Fluent API design<br/>pattern</th>\r\n    <td>Implemented examples of the <i>Fluent API</i> design pattern while retaining capability of <br/>\r\n    the traditional page object pattern.</td>\r\n  </tr>\r\n  <tr>\r\n    <th>Multi-project build<br/>configuration</th>\r\n    <td>Implemented multiple project build.  The root project has a subproject called \"core\" and all <br/>\r\n   subprojects of \"core\" inherit classes from it.</td>\r\n  </tr>\r\n  <tr>\r\n    <th>Run Options</th>\r\n    <td>You have three different options for running the tests: via the Gradle GUI, via your IDE<br/>Gradle\r\n    plugin, or via Gradle command line. To run with<br/>the JUnit runner in your IDE, \r\n    you would need to manually export your project <br/>as a normal Java project, because this template does\r\n    not support that.</td>\r\n  </tr>\r\n  <tr>\r\n    <th>Core utility package</th>\r\n    <td>All projects inherit from a \"core\" project that contains classes where you can store methods<br/>\r\n        that all of your projects can share between them.</td>\r\n  </tr>\r\n</table>\r\n\r\n# Un-implemented Features\r\n<table>\r\n  <tr>\r\n    <th>Feature</th>\r\n    <th>Description</th>\r\n  </tr>\r\n  <tr>\r\n    <th>Gradle Wrapper</th>\r\n    <td>Did not choose to implement the Gradle wrapper because I believe that downloading Gradle and<br/>\r\n       configuring GRADLE_HOME and PATH are easy enough.  Also, a manual setup of Gradle gives<br/>us more\r\n       control using a batch script.  Also, the development IDE can be configured to use the <br/>\r\n       statically defined Gradle home.</td>\r\n  </tr>\r\n  <tr>\r\n    <th>Jar executable option</th>\r\n    <td>Creates an uberJar of all projects and subprojects that can be ran by double clicking<br/>\r\n       the .jar file.  If you don't have the file association supporting it, we include a <br/>\r\n       jarAssociation.bat file to setup the file association on your Windows system.  I was planning<br/>\r\n       to implement this but currently having trouble getting it to work.</td>\r\n  </tr>\r\n</table>\r\n\r\n# Configuration And Setup\r\n\r\n#### Eclipse\r\nTo get it working on a regular Eclipse Juno (rather than Spring Source Suite) then perform the following<br/>\r\nsteps.  If you deviate from these steps you risk importing the project incorrectly. You know you did it<br/>correctly if your imported project resembles the screenshot I provided called \"layout.png\".\r\n \r\n1. Add the following software repositories to your Eclipse software update panel:<br/>\r\n    a. \"SpringSource Update Site for Eclipse Juno 4.2\" - http://dist.springsource.com/release/TOOLS/update/e4.2 <br/>\r\n   If you have Eclipse 3.x, then the Sprint 3.7 update site may work for you.  <br/>\r\n   (http://www.springsource.org/STS-installation-instructions )\r\n2. Install the new software components called \"Gradle Tooling API\" and \"Gradle IDE\". Restart Eclipse. <br/> \r\n3. Download the .zip archive of this GitHub project distribution and unzip it to your workspace.  An example<br/>\r\n   might be:  \"C:\\Eclipse32\\workspace\\WebDriverTestingTemplate\\\" .<br/>\r\n4. Use the Eclipse \"Import\" function from the Eclipse \"File menu\" to import a \"Project\" of type \"Gradle\".\r\n5. Browse using the import wizard to your projects \"root\" sub-directory described in Step #3 (above).  Then click<br/>\r\n   the \"Build model\" button.  We do this because of the \"includeFlat\" Gradle layout.\r\n6. Check all checkboxes .  You could also choose to add all to your \"working set\" if you like but it isn't required.<br/>\r\n7. Rebuild the dependencies by right clicking on the project and then choose Gradle-->Refresh All Dependencies <br/>\r\n8. Right click on your project and choose \"Run As-->External Tools Configuration\".  Configure a new \"clean\" and \"build\"<br/>\r\n   configuration for running a sub-project (or whatever tasks you want to execute).<br/>\r\n9. Optionally, you can run this project on the command line with \"gradle identify google:show google:clean <br/>\r\n   google:build --info\" and it will execute the project unit tests.  Also, this project provides a .bat batch<br/>\r\n   script that does this and provides a menu of other actions you can execute.\r\n\r\n#### IntelliJ-IDEA\r\nIntellij-IDEA has a nice Gradle plugin that is included.  The steps are otherwise similar to the Eclipse steps #3-#7 <br/>\r\nabove.\r\n\r\n#### Notes\r\nI use \"GitHub GUI\" to sync my local project repo to GitHub.  If you fork my project, I would recommend doing <br/>\r\nit this way unless you are a Git expert and prefer another way.<br/>\r\n\r\nSome similar and related projects:<br/>\r\nhttps://github.com/sebarmeli/Selenium2-Java-QuickStart-Archetype<br/>\r\nhttps://github.com/sebarmeli/Selenium2-Java-Demo<br/>\r\nhttps://github.com/djangofan/vanq-java<br/>\r\nhttp://code.google.com/p/selenium-ext/source/browse/<br/>\r\nhttps://github.com/codeborne/selenide_examples<br/>\r\n<br/>\r\nWebsite of this project:<br/>\r\nhttp://djangofan.github.com/WebDriverTestingTemplate/<br/>\r\n<br/>\r\nMarkdown cheatsheet:<br/>\r\nhttps://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet<br/>\r\n<br/>\r\n\r\n\r\n# FAQ\r\n1.  If the intellisense in Eclipse doesn't work, make sure you have added all the .class directories to<br/>\r\n    your Eclipse project classpath.  (See the included .classpath file.)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}