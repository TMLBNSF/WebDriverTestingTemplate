apply plugin: 'java'
group = 'qa.webdriver'

ext {
    sourceCompatibility = 1.6
    projTitle = 'WebDriver Core On Gradle'
    projVersion = '1.00.0'
}

usePlugin 'maven'  // Maven plugin to install artifact in local Maven repo.

def localMavenRepo = 'file://' + new File( System.getProperty('user.home'), '.m2/repository' ).absolutePath

// The following line is not necessary. Default the install tasks depends on the
// jar task, but this means no tests and checks are executed when we use the
// install task. The following line makes the install tasks depend on the build task
// and now all tests and checks are done before install is executed.
install.dependsOn ':build'

repositories {
    mavenCentral()
    maven {
        url "http://maven2.javacpp.googlecode.com/git/"
    }
    maven {
        url "http://maven2.javacv.googlecode.com/git/"
    }
    // Use local Maven repo location. We don't need this if we only want to install
    // an artifact, but we do need it if we want to use dependencies from the local
    // repository.
    mavenRepo urls: localMavenRepo
}

dependencies {
    compile group: 'org.seleniumhq.selenium', name: 'selenium-java', version: '2.+'
    compile group: 'junit', name: 'junit', version: '4.+'
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.+'
    compile group: 'ch.qos.logback', name: 'logback-core', version: '1.0.+'
    compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.0.+'
}

task show << {
    println ""
    println "-----------------------------------------------"
    println "Project Name: " + projTitle
    println "Version: " + projVersion
    println "Build output: " + relativePath(compileJava.destinationDir)
    println "Resources output: " + relativePath(processResources.destinationDir)
    println "-----------------------------------------------"
}

